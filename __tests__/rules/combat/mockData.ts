import type {
  AbilityScoreModifiers,
  AbilityScores,
  Character,
  Monster,
  Weapon,
} from '@rules/types';

// Mock ability scores
export const standardAbilityScores: AbilityScores = {
  strength: 16,
  dexterity: 14,
  constitution: 15,
  intelligence: 12,
  wisdom: 10,
  charisma: 13,
};

// Mock ability modifiers corresponding to standard scores
export const standardAbilityModifiers: AbilityScoreModifiers = {
  // Strength 16: OSRIC table shows +0 hit, +1 damage
  strengthHitAdj: 0,
  strengthDamageAdj: 1,
  strengthEncumbrance: 35,
  strengthOpenDoors: 1,
  strengthBendBars: 10,

  // Dexterity 14: OSRIC table shows +0 surprise, +0 missile, +0 AC
  dexterityReaction: 0,
  dexterityMissile: 0,
  dexterityDefense: 0,
  dexterityPickPockets: 0,
  dexterityOpenLocks: 0,
  dexterityFindTraps: 0,
  dexterityMoveSilently: 0,
  dexterityHideInShadows: 0,

  // Constitution
  constitutionHitPoints: 1,
  constitutionSystemShock: 90,
  constitutionResurrectionSurvival: 92,
  constitutionPoisonSave: 0,

  // Intelligence
  intelligenceLanguages: 3,
  intelligenceLearnSpells: 55,
  intelligenceMaxSpellLevel: 7,
  intelligenceIllusionImmunity: false,

  // Wisdom
  wisdomMentalSave: 0,
  wisdomBonusSpells: null,
  wisdomSpellFailure: 0,

  // Charisma 13: OSRIC table shows +5 reaction, +0 loyalty, 5 max henchmen
  charismaReactionAdj: 5,
  charismaLoyaltyBase: 50,
  charismaMaxHenchmen: 5,
};

// Mock weapons
export const mockWeapons: Record<string, Weapon> = {
  longsword: {
    id: 'weapon_longsword',
    name: 'Sword, Long',
    weight: 60,
    description: 'Standard longsword',
    value: 15,
    equipped: true,
    magicBonus: null,
    charges: null,
    damage: '1d8',
    type: 'Melee',
    size: 'Medium',
    speed: 5,
    allowedClasses: ['Fighter', 'Ranger', 'Paladin', 'Cleric', 'Thief', 'Assassin'],
    damageVsLarge: '1d12',
    range: null,
    twoHanded: false,
  },
  magicLongsword: {
    id: 'weapon_magic_longsword',
    name: 'Sword, Long +1',
    weight: 60,
    description: 'Magic longsword',
    value: 2000,
    equipped: true,
    magicBonus: 1,
    charges: null,
    damage: '1d8',
    type: 'Melee',
    size: 'Medium',
    speed: 5,
    allowedClasses: ['Fighter', 'Ranger', 'Paladin', 'Cleric', 'Thief', 'Assassin'],
    damageVsLarge: '1d12',
    range: null,
    twoHanded: false,
  },
  shortbow: {
    id: 'weapon_shortbow',
    name: 'Bow, Short',
    weight: 30,
    description: 'Standard short bow',
    value: 30,
    equipped: true,
    magicBonus: null,
    charges: null,
    damage: '1d6',
    type: 'Ranged',
    size: 'Medium',
    speed: 7,
    allowedClasses: ['Fighter', 'Ranger', 'Thief'],
    damageVsLarge: null,
    range: [50, 100, 150],
    twoHanded: true,
  },
  dagger: {
    id: 'weapon_dagger',
    name: 'Dagger',
    weight: 10,
    description: 'Standard dagger',
    value: 2,
    equipped: true,
    magicBonus: null,
    charges: null,
    damage: '1d4',
    type: 'Melee',
    size: 'Small',
    speed: 2,
    allowedClasses: [
      'Fighter',
      'Ranger',
      'Paladin',
      'Magic-User',
      'Illusionist',
      'Cleric',
      'Druid',
      'Thief',
      'Assassin',
    ],
    damageVsLarge: '1d3',
    range: [10, 20, 30],
    twoHanded: false,
  },
};

// Mock fighter character
export const mockFighter: Character = {
  id: 'char_fighter',
  name: 'Sir Roland',
  level: 5,
  hitPoints: {
    current: 40,
    maximum: 40,
  },
  armorClass: 4, // Lower is better in OSRIC
  thac0: 16, // 'To Hit Armor Class 0'
  experience: {
    current: 20000,
    requiredForNextLevel: 32000,
    level: 5,
  },
  alignment: 'Lawful Good',
  inventory: [mockWeapons.longsword, mockWeapons.dagger],
  position: 'front line',
  statusEffects: [],
  race: 'Human',
  class: 'Fighter',
  abilities: standardAbilityScores,
  abilityModifiers: standardAbilityModifiers,
  savingThrows: {
    'Poison or Death': 12,
    Wands: 13,
    'Paralysis, Polymorph, or Petrification': 14,
    'Breath Weapons': 15,
    'Spells, Rods, or Staves': 16,
  },
  spells: [],
  currency: {
    platinum: 0,
    gold: 50,
    electrum: 10,
    silver: 20,
    copper: 30,
  },
  encumbrance: 120,
  movementRate: 12,
  classes: {
    Fighter: 5,
  },
  primaryClass: 'Fighter',
  spellSlots: {},
  memorizedSpells: {},
  spellbook: [],
  thiefSkills: null,
  turnUndead: null,
  languages: ['Common', 'Orcish'],
  age: 25,
  ageCategory: 'Adult',
  henchmen: [],
  racialAbilities: [],
  classAbilities: [],
  proficiencies: [
    { weapon: 'Sword, Long', penalty: 0 },
    { weapon: 'Dagger', penalty: 0 },
  ],
  secondarySkills: [],
};

// Mock thief character with ranged weapon
export const mockThief: Character = {
  id: 'char_thief',
  name: 'Shadow',
  level: 5,
  hitPoints: {
    current: 25,
    maximum: 25,
  },
  armorClass: 6,
  thac0: 18,
  experience: {
    current: 20000,
    requiredForNextLevel: 40000,
    level: 5,
  },
  alignment: 'True Neutral',
  inventory: [mockWeapons.shortbow, mockWeapons.dagger],
  position: 'back line',
  statusEffects: [],
  race: 'Elf',
  class: 'Thief',
  abilities: {
    ...standardAbilityScores,
    dexterity: 17, // Higher dexterity for thief
  },
  abilityModifiers: {
    ...standardAbilityModifiers,
    // Dexterity 17: OSRIC table shows +2 surprise, +2 missile, -3 AC
    dexterityReaction: 2,
    dexterityMissile: 2,
    dexterityDefense: -3,
  },
  savingThrows: {
    'Poison or Death': 13,
    Wands: 14,
    'Paralysis, Polymorph, or Petrification': 12,
    'Breath Weapons': 16,
    'Spells, Rods, or Staves': 15,
  },
  spells: [],
  currency: {
    platinum: 0,
    gold: 30,
    electrum: 0,
    silver: 40,
    copper: 50,
  },
  encumbrance: 80,
  movementRate: 12,
  classes: {
    Thief: 5,
  },
  primaryClass: 'Thief',
  spellSlots: {},
  memorizedSpells: {},
  spellbook: [],
  thiefSkills: {
    pickPockets: 50,
    openLocks: 45,
    findTraps: 40,
    removeTraps: 35,
    moveSilently: 55,
    hideInShadows: 40,
    hearNoise: 30,
    climbWalls: 85,
    readLanguages: 25,
  },
  turnUndead: null,
  languages: ['Common', 'Elvish', "Thieves' Cant"],
  age: 130,
  ageCategory: 'Adult',
  henchmen: [],
  racialAbilities: [],
  classAbilities: [],
  proficiencies: [
    { weapon: 'Bow, Short', penalty: 0 },
    { weapon: 'Dagger', penalty: 0 },
  ],
  secondarySkills: [],
};

// Mock wizard character
export const mockWizard: Character = {
  id: 'char_wizard',
  name: 'Merlin',
  level: 5,
  hitPoints: {
    current: 18,
    maximum: 18,
  },
  armorClass: 8,
  thac0: 19,
  experience: {
    current: 20000,
    requiredForNextLevel: 40000,
    level: 5,
  },
  alignment: 'Neutral Good',
  inventory: [mockWeapons.dagger],
  position: 'back line',
  statusEffects: [],
  race: 'Human',
  class: 'Magic-User',
  abilities: {
    ...standardAbilityScores,
    intelligence: 17,
    strength: 9,
  },
  abilityModifiers: {
    ...standardAbilityModifiers,
    intelligenceLanguages: 7,
    intelligenceLearnSpells: 75,
    intelligenceMaxSpellLevel: 9,
    strengthHitAdj: 0,
    strengthDamageAdj: 0,
  },
  savingThrows: {
    'Poison or Death': 14,
    Wands: 11,
    'Paralysis, Polymorph, or Petrification': 13,
    'Breath Weapons': 15,
    'Spells, Rods, or Staves': 12,
  },
  spells: [],
  currency: {
    platinum: 2,
    gold: 40,
    electrum: 0,
    silver: 15,
    copper: 0,
  },
  encumbrance: 50,
  movementRate: 12,
  classes: {
    'Magic-User': 5,
  },
  primaryClass: 'Magic-User',
  spellSlots: {
    1: 4,
    2: 2,
    3: 1,
  },
  memorizedSpells: {},
  spellbook: [],
  thiefSkills: null,
  turnUndead: null,
  languages: ['Common', 'Elvish', 'Draconic', 'Dwarvish'],
  age: 40,
  ageCategory: 'Adult',
  henchmen: [],
  racialAbilities: [],
  classAbilities: [],
  proficiencies: [{ weapon: 'Dagger', penalty: 0 }],
  secondarySkills: [],
};

// Mock goblin
export const mockGoblin: Monster = {
  id: 'monster_goblin',
  name: 'Goblin',
  level: 1,
  hitPoints: {
    current: 6,
    maximum: 6,
  },
  armorClass: 6,
  thac0: 20,
  experience: {
    current: 0,
    requiredForNextLevel: 0,
    level: 1,
  },
  alignment: 'Lawful Evil',
  inventory: [],
  position: 'front line',
  statusEffects: [],
  hitDice: '1-1',
  damagePerAttack: ['1d6'], // Short sword
  morale: 7,
  treasure: 'J',
  specialAbilities: ["Infravision 60'"],
  xpValue: 10,
  size: 'Small',
  movementTypes: [{ type: 'Walk', rate: 6 }],
  habitat: ['Underground', 'Wilderness'],
  frequency: 'Common',
  organization: 'Tribal',
  diet: 'Omnivore',
  ecology: 'Goblins are small, evil humanoids that dwell underground.',
};

// Mock orc
export const mockOrc: Monster = {
  id: 'monster_orc',
  name: 'Orc',
  level: 1,
  hitPoints: {
    current: 8,
    maximum: 8,
  },
  armorClass: 6,
  thac0: 19,
  experience: {
    current: 0,
    requiredForNextLevel: 0,
    level: 1,
  },
  alignment: 'Lawful Evil',
  inventory: [],
  position: 'front line',
  statusEffects: [],
  hitDice: '1',
  damagePerAttack: ['1d8'], // Longsword
  morale: 8,
  treasure: 'L',
  specialAbilities: ["Infravision 60'"],
  xpValue: 15,
  size: 'Medium',
  movementTypes: [{ type: 'Walk', rate: 9 }],
  habitat: ['Underground', 'Wilderness'],
  frequency: 'Common',
  organization: 'Tribal',
  diet: 'Carnivore',
  ecology: 'Orcs are aggressive, brutish humanoids that raid and pillage.',
};

// Mock troll (tougher monster)
export const mockTroll: Monster = {
  id: 'monster_troll',
  name: 'Troll',
  level: 6,
  hitPoints: {
    current: 42,
    maximum: 42,
  },
  armorClass: 4,
  thac0: 13,
  experience: {
    current: 0,
    requiredForNextLevel: 0,
    level: 6,
  },
  alignment: 'Chaotic Evil',
  inventory: [],
  position: 'front line',
  statusEffects: [],
  hitDice: '6+6',
  damagePerAttack: ['1d6/1d6', '1d10'], // Claws and bite
  morale: 10,
  treasure: 'D',
  specialAbilities: ['Regeneration 3 HP/round', "Infravision 60'", 'Vulnerable to fire and acid'],
  xpValue: 650,
  size: 'Large',
  movementTypes: [{ type: 'Walk', rate: 12 }],
  habitat: ['Wilderness', 'Underground', 'Swamp'],
  frequency: 'Uncommon',
  organization: 'Solitary or gang',
  diet: 'Carnivore',
  ecology:
    'Trolls are feared for their strength, ravenous hunger, and incredible regenerative abilities.',
};
